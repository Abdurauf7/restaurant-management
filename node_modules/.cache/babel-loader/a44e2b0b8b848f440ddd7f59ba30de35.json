{"ast":null,"code":"var _jsxFileName = \"/Users/abdurauf/Desktop/\\u6BD5\\u4E1A\\u8BBE\\u8BA1/orginal/restaurant-management-system/plov/src/components/Admin/components/Dish.js\";\nimport React, { Component, Fragment } from \"react\";\nimport { Layout, Table, Button, InputNumber, Input, Form, Popconfirm } from \"antd\";\nimport { Resizable } from \"react-resizable\"; // for resizing\n\nconst ResizeableTitle = props => {\n  const {\n    onResize,\n    width,\n    ...restProps\n  } = props;\n\n  if (!width) {\n    return React.createElement(\"th\", Object.assign({}, restProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }));\n  }\n\n  return React.createElement(Resizable, {\n    width: width,\n    height: 0,\n    onResize: onResize,\n    draggableOpts: {\n      enableUserSelectHack: false\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"th\", Object.assign({}, restProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  })));\n}; // for editable\n\n\nconst EditableContext = React.createContext();\n\nclass EditableCell extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.getInput = () => {\n      if (this.props.inputType === \"number\") {\n        return React.createElement(InputNumber, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(Input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      });\n    };\n\n    this.renderCell = ({\n      getFieldDecorator\n    }) => {\n      const {\n        editing,\n        dataIndex,\n        title,\n        inputType,\n        record,\n        index,\n        children,\n        ...restProps\n      } = this.props;\n      return React.createElement(\"td\", Object.assign({}, restProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }), editing ? React.createElement(Form.Item, {\n        style: {\n          margin: 0\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, getFieldDecorator(dataIndex, {\n        rules: [{\n          required: true,\n          message: `Please Input ${title}!`\n        }],\n        initialValue: record[dataIndex]\n      })(this.getInput())) : children);\n    };\n  }\n\n  render() {\n    return React.createElement(EditableContext.Consumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, this.renderCell);\n  }\n\n}\n\nconst {\n  Content\n} = Layout;\nexport default class Dish extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDelete = key => {\n      const dataSource = [...this.state.dataSource];\n      this.setState({\n        dataSource: dataSource.filter(item => item.key !== key)\n      });\n    };\n\n    this.components = {\n      header: {\n        cell: ResizeableTitle\n      }\n    };\n\n    this.handleAdd = () => {\n      const {\n        count,\n        dataSource\n      } = this.state;\n      const newData = {\n        key: count,\n        name: `Murskoy kapriz `,\n        price: \"¥25\",\n        type: `salad `\n      };\n      this.setState({\n        dataSource: [...dataSource, newData],\n        count: count + 1\n      });\n    };\n\n    this.handleResize = index => (e, {\n      size\n    }) => {\n      this.setState(({\n        columns\n      }) => {\n        const nextColumns = [...columns];\n        nextColumns[index] = { ...nextColumns[index],\n          width: size.width\n        };\n        return {\n          columns: nextColumns\n        };\n      });\n    };\n\n    this.state = {\n      columns: [{\n        title: \"Name\",\n        dataIndex: \"name\",\n        editable: true\n      }, {\n        title: \"Price\",\n        dataIndex: \"price\",\n        editable: true\n      }, {\n        title: \"Type\",\n        dataIndex: \"type\",\n        editable: true\n      }, {\n        title: \"Delete\",\n        dataIndex: \"operation\",\n        render: (text, record) => this.state.dataSource.length >= 1 ? React.createElement(Button, {\n          size: \"small\",\n          style: {\n            width: \"60px\"\n          },\n          onClick: () => this.handleDelete(record.key),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, \"Delete\") : null\n      }, {\n        title: \"operation\",\n        dataIndex: \"operation\",\n        render: (text, record) => {\n          const {\n            editingKey\n          } = this.state;\n          const editable = this.isEditing(record);\n          return editable ? React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 126\n            },\n            __self: this\n          }, React.createElement(EditableContext.Consumer, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 127\n            },\n            __self: this\n          }, form => React.createElement(\"a\", {\n            onClick: () => this.save(form, record.key),\n            style: {\n              marginRight: 8\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 129\n            },\n            __self: this\n          }, \"Save\")), React.createElement(Popconfirm, {\n            title: \"Sure to cancel?\",\n            onConfirm: () => this.cancel(record.key),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 137\n            },\n            __self: this\n          }, React.createElement(\"a\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 141\n            },\n            __self: this\n          }, \"Cancel\"))) : React.createElement(\"a\", {\n            disabled: editingKey !== \"\",\n            onClick: () => this.edit(record.key),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 145\n            },\n            __self: this\n          }, \"Edit\");\n        }\n      }],\n      dataSource: [{\n        key: \"1\",\n        name: \"Fried Rice\",\n        price: \"￥8\",\n        type: \"Rice&Noodes\"\n      }, {\n        key: \"2\",\n        name: \"Liten kebab\",\n        price: \"￥12\",\n        type: \"Kebab\"\n      }, {\n        key: \"3\",\n        name: \"Margarita\",\n        price: \"￥35\",\n        type: \"Pissa\"\n      }, {\n        key: \"4\",\n        name: \"French toast\",\n        price: \"￥140\",\n        type: \"Snack\"\n      }],\n      count: 4,\n      editingKey: \"\"\n    };\n  }\n\n  render() {\n    const columns = this.state.columns.map((col, index) => ({ ...col,\n      onHeaderCell: column => ({\n        width: column.width,\n        onResize: this.handleResize(index)\n      })\n    }));\n    const {\n      dataSource\n    } = this.state;\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(Content, {\n      style: {\n        margin: \"2em 16px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        background: \"#fff\",\n        padding: 24,\n        minHeight: 280\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.handleAdd,\n      type: \"primary\",\n      style: {\n        marginBottom: 16,\n        width: \"100px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, \"Add a row\"), React.createElement(EditableContext.Provider, {\n      value: this.props.form,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, React.createElement(Table, {\n      components: this.components,\n      columns: columns,\n      dataSource: dataSource,\n      bordered: true,\n      title: () => \"Dish Menu\",\n      footer: () => \"Footer\",\n      scroll: {\n        y: 240\n      },\n      pagination: {\n        pageSize: 50\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    })))));\n  }\n\n}","map":{"version":3,"sources":["/Users/abdurauf/Desktop/毕业设计/orginal/restaurant-management-system/plov/src/components/Admin/components/Dish.js"],"names":["React","Component","Fragment","Layout","Table","Button","InputNumber","Input","Form","Popconfirm","Resizable","ResizeableTitle","props","onResize","width","restProps","enableUserSelectHack","EditableContext","createContext","EditableCell","getInput","inputType","renderCell","getFieldDecorator","editing","dataIndex","title","record","index","children","margin","rules","required","message","initialValue","render","Content","Dish","constructor","handleDelete","key","dataSource","state","setState","filter","item","components","header","cell","handleAdd","count","newData","name","price","type","handleResize","e","size","columns","nextColumns","editable","text","length","editingKey","isEditing","form","save","marginRight","cancel","edit","map","col","onHeaderCell","column","background","padding","minHeight","marginBottom","y","pageSize"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport {\n  Layout,\n  Table,\n  Button,\n  InputNumber,\n  Input,\n  Form,\n  Popconfirm\n} from \"antd\";\nimport { Resizable } from \"react-resizable\";\n\n// for resizing\nconst ResizeableTitle = props => {\n  const { onResize, width, ...restProps } = props;\n\n  if (!width) {\n    return <th {...restProps} />;\n  }\n\n  return (\n    <Resizable\n      width={width}\n      height={0}\n      onResize={onResize}\n      draggableOpts={{ enableUserSelectHack: false }}\n    >\n      <th {...restProps} />\n    </Resizable>\n  );\n};\n\n// for editable\nconst EditableContext = React.createContext();\n\nclass EditableCell extends React.Component {\n  getInput = () => {\n    if (this.props.inputType === \"number\") {\n      return <InputNumber />;\n    }\n    return <Input />;\n  };\n\n  renderCell = ({ getFieldDecorator }) => {\n    const {\n      editing,\n      dataIndex,\n      title,\n      inputType,\n      record,\n      index,\n      children,\n      ...restProps\n    } = this.props;\n    return (\n      <td {...restProps}>\n        {editing ? (\n          <Form.Item style={{ margin: 0 }}>\n            {getFieldDecorator(dataIndex, {\n              rules: [\n                {\n                  required: true,\n                  message: `Please Input ${title}!`\n                }\n              ],\n              initialValue: record[dataIndex]\n            })(this.getInput())}\n          </Form.Item>\n        ) : (\n          children\n        )}\n      </td>\n    );\n  };\n\n  render() {\n    return (\n      <EditableContext.Consumer>{this.renderCell}</EditableContext.Consumer>\n    );\n  }\n}\n\nconst { Content } = Layout;\nexport default class Dish extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      columns: [\n        {\n          title: \"Name\",\n          dataIndex: \"name\",\n          editable: true\n        },\n        {\n          title: \"Price\",\n          dataIndex: \"price\",\n          editable: true\n        },\n        {\n          title: \"Type\",\n          dataIndex: \"type\",\n          editable: true\n        },\n        {\n          title: \"Delete\",\n          dataIndex: \"operation\",\n          render: (text, record) =>\n            this.state.dataSource.length >= 1 ? (\n              <Button\n                size=\"small\"\n                style={{ width: \"60px\" }}\n                onClick={() => this.handleDelete(record.key)}\n              >\n                Delete\n              </Button>\n            ) : null\n        },\n        {\n          title: \"operation\",\n          dataIndex: \"operation\",\n          render: (text, record) => {\n            const { editingKey } = this.state;\n            const editable = this.isEditing(record);\n            return editable ? (\n              <span>\n                <EditableContext.Consumer>\n                  {form => (\n                    <a\n                      onClick={() => this.save(form, record.key)}\n                      style={{ marginRight: 8 }}\n                    >\n                      Save\n                    </a>\n                  )}\n                </EditableContext.Consumer>\n                <Popconfirm\n                  title=\"Sure to cancel?\"\n                  onConfirm={() => this.cancel(record.key)}\n                >\n                  <a>Cancel</a>\n                </Popconfirm>\n              </span>\n            ) : (\n              <a\n                disabled={editingKey !== \"\"}\n                onClick={() => this.edit(record.key)}\n              >\n                Edit\n              </a>\n            );\n          }\n        }\n      ],\n\n      dataSource: [\n        {\n          key: \"1\",\n          name: \"Fried Rice\",\n          price: \"￥8\",\n          type: \"Rice&Noodes\"\n        },\n        {\n          key: \"2\",\n          name: \"Liten kebab\",\n          price: \"￥12\",\n          type: \"Kebab\"\n        },\n        {\n          key: \"3\",\n          name: \"Margarita\",\n          price: \"￥35\",\n          type: \"Pissa\"\n        },\n        {\n          key: \"4\",\n          name: \"French toast\",\n          price: \"￥140\",\n          type: \"Snack\"\n        }\n      ],\n      count: 4,\n      editingKey: \"\"\n    };\n  }\n\n  handleDelete = key => {\n    const dataSource = [...this.state.dataSource];\n    this.setState({ dataSource: dataSource.filter(item => item.key !== key) });\n  };\n\n  components = {\n    header: {\n      cell: ResizeableTitle\n    }\n  };\n  handleAdd = () => {\n    const { count, dataSource } = this.state;\n    const newData = {\n      key: count,\n      name: `Murskoy kapriz `,\n      price: \"¥25\",\n      type: `salad `\n    };\n    this.setState({\n      dataSource: [...dataSource, newData],\n      count: count + 1\n    });\n  };\n\n  handleResize = index => (e, { size }) => {\n    this.setState(({ columns }) => {\n      const nextColumns = [...columns];\n      nextColumns[index] = {\n        ...nextColumns[index],\n        width: size.width\n      };\n      return { columns: nextColumns };\n    });\n  };\n\n  render() {\n    const columns = this.state.columns.map((col, index) => ({\n      ...col,\n      onHeaderCell: column => ({\n        width: column.width,\n        onResize: this.handleResize(index)\n      })\n    }));\n    const { dataSource } = this.state;\n    return (\n      <Fragment>\n        <Content style={{ margin: \"2em 16px\" }}>\n          <div style={{ background: \"#fff\", padding: 24, minHeight: 280 }}>\n            <Button\n              onClick={this.handleAdd}\n              type=\"primary\"\n              style={{ marginBottom: 16, width: \"100px\" }}\n            >\n              Add a row\n            </Button>\n\n            <EditableContext.Provider value={this.props.form}>\n              <Table\n                components={this.components}\n                columns={columns}\n                dataSource={dataSource}\n                bordered\n                title={() => \"Dish Menu\"}\n                footer={() => \"Footer\"}\n                scroll={{ y: 240 }}\n                pagination={{ pageSize: 50 }}\n              />\n            </EditableContext.Provider>\n          </div>\n        </Content>\n      </Fragment>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}