{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nimport React from 'react';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport useMemo from \"rc-util/es/hooks/useMemo\";\nimport Tree from 'rc-tree';\nimport { SelectContext } from './Context';\nimport useKeyValueMapping from './hooks/useKeyValueMapping';\nimport useKeyValueMap from './hooks/useKeyValueMap';\nvar HIDDEN_STYLE = {\n  width: 0,\n  height: 0,\n  display: 'flex',\n  overflow: 'hidden',\n  opacity: 0,\n  border: 0,\n  padding: 0,\n  margin: 0\n};\n\nvar OptionList = function OptionList(props, ref) {\n  var prefixCls = props.prefixCls,\n      height = props.height,\n      itemHeight = props.itemHeight,\n      options = props.options,\n      flattenOptions = props.flattenOptions,\n      multiple = props.multiple,\n      searchValue = props.searchValue,\n      onSelect = props.onSelect,\n      onToggleOpen = props.onToggleOpen,\n      open = props.open,\n      notFoundContent = props.notFoundContent;\n\n  var _React$useContext = React.useContext(SelectContext),\n      checkable = _React$useContext.checkable,\n      checkedKeys = _React$useContext.checkedKeys,\n      halfCheckedKeys = _React$useContext.halfCheckedKeys,\n      treeExpandedKeys = _React$useContext.treeExpandedKeys,\n      treeDefaultExpandAll = _React$useContext.treeDefaultExpandAll,\n      treeDefaultExpandedKeys = _React$useContext.treeDefaultExpandedKeys,\n      onTreeExpand = _React$useContext.onTreeExpand,\n      treeIcon = _React$useContext.treeIcon,\n      showTreeIcon = _React$useContext.showTreeIcon,\n      switcherIcon = _React$useContext.switcherIcon,\n      treeLine = _React$useContext.treeLine,\n      treeNodeFilterProp = _React$useContext.treeNodeFilterProp,\n      loadData = _React$useContext.loadData,\n      treeLoadedKeys = _React$useContext.treeLoadedKeys,\n      treeMotion = _React$useContext.treeMotion,\n      onTreeLoad = _React$useContext.onTreeLoad;\n\n  var treeRef = React.useRef();\n  var memoOptions = useMemo(function () {\n    return options;\n  }, [open, options], function (prev, next) {\n    return next[0] && prev[1] !== next[1];\n  });\n\n  var _useKeyValueMap = useKeyValueMap(flattenOptions),\n      _useKeyValueMap2 = _slicedToArray(_useKeyValueMap, 2),\n      cacheKeyMap = _useKeyValueMap2[0],\n      cacheValueMap = _useKeyValueMap2[1];\n\n  var _useKeyValueMapping = useKeyValueMapping(cacheKeyMap, cacheValueMap),\n      _useKeyValueMapping2 = _slicedToArray(_useKeyValueMapping, 2),\n      getEntityByKey = _useKeyValueMapping2[0],\n      getEntityByValue = _useKeyValueMapping2[1]; // ========================== Values ==========================\n\n\n  var valueKeys = React.useMemo(function () {\n    return checkedKeys.map(function (val) {\n      var entity = getEntityByValue(val);\n      return entity ? entity.key : null;\n    });\n  }, [checkedKeys]);\n  var mergedCheckedKeys = React.useMemo(function () {\n    if (!checkable) {\n      return null;\n    }\n\n    return {\n      checked: valueKeys,\n      halfChecked: halfCheckedKeys\n    };\n  }, [valueKeys, halfCheckedKeys, checkable]); // ========================== Scroll ==========================\n\n  React.useEffect(function () {\n    // Single mode should scroll to current key\n    if (open && !multiple && valueKeys.length) {\n      var _treeRef$current;\n\n      (_treeRef$current = treeRef.current) === null || _treeRef$current === void 0 ? void 0 : _treeRef$current.scrollTo({\n        key: valueKeys[0]\n      });\n    }\n  }, [open]); // ========================== Search ==========================\n\n  var lowerSearchValue = String(searchValue).toLowerCase();\n\n  var filterTreeNode = function filterTreeNode(treeNode) {\n    if (!lowerSearchValue) {\n      return false;\n    }\n\n    return String(treeNode[treeNodeFilterProp]).toLowerCase().includes(lowerSearchValue);\n  }; // =========================== Keys ===========================\n\n\n  var _React$useState = React.useState(treeDefaultExpandedKeys),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      expandedKeys = _React$useState2[0],\n      setExpandedKeys = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      searchExpandedKeys = _React$useState4[0],\n      setSearchExpandedKeys = _React$useState4[1];\n\n  var mergedExpandedKeys = treeExpandedKeys || (searchValue ? searchExpandedKeys : expandedKeys);\n  React.useEffect(function () {\n    if (searchValue) {\n      setSearchExpandedKeys(flattenOptions.map(function (o) {\n        return o.key;\n      }));\n    }\n  }, [searchValue]);\n\n  var onInternalExpand = function onInternalExpand(keys) {\n    setExpandedKeys(keys);\n    setSearchExpandedKeys(keys);\n\n    if (onTreeExpand) {\n      onTreeExpand(keys);\n    }\n  }; // ========================== Events ==========================\n\n\n  var onListMouseDown = function onListMouseDown(event) {\n    event.preventDefault();\n  };\n\n  var onInternalSelect = function onInternalSelect(_, _ref) {\n    var key = _ref.node.key;\n    var entity = getEntityByKey(key, checkable ? 'checkbox' : 'select');\n\n    if (entity !== null) {\n      onSelect(entity.data.value, {\n        selected: !checkedKeys.includes(entity.data.value)\n      });\n    }\n\n    if (!multiple) {\n      onToggleOpen(false);\n    }\n  }; // ========================= Keyboard =========================\n\n\n  var _React$useState5 = React.useState(null),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      activeKey = _React$useState6[0],\n      setActiveKey = _React$useState6[1];\n\n  var activeEntity = getEntityByKey(activeKey);\n  React.useImperativeHandle(ref, function () {\n    return {\n      onKeyDown: function onKeyDown(event) {\n        var _treeRef$current2;\n\n        var which = event.which;\n\n        switch (which) {\n          // >>> Arrow keys\n          case KeyCode.UP:\n          case KeyCode.DOWN:\n          case KeyCode.LEFT:\n          case KeyCode.RIGHT:\n            (_treeRef$current2 = treeRef.current) === null || _treeRef$current2 === void 0 ? void 0 : _treeRef$current2.onKeyDown(event);\n            break;\n          // >>> Select item\n\n          case KeyCode.ENTER:\n            {\n              if (activeEntity !== null) {\n                onInternalSelect(null, {\n                  node: {\n                    key: activeKey\n                  },\n                  selected: !checkedKeys.includes(activeEntity.data.value)\n                });\n              }\n\n              break;\n            }\n          // >>> Close\n\n          case KeyCode.ESC:\n            {\n              onToggleOpen(false);\n            }\n        }\n      },\n      onKeyUp: function onKeyUp() {}\n    };\n  }); // ========================== Render ==========================\n\n  if (memoOptions.length === 0) {\n    return React.createElement(\"div\", {\n      role: \"listbox\",\n      className: \"\".concat(prefixCls, \"-empty\"),\n      onMouseDown: onListMouseDown\n    }, notFoundContent);\n  }\n\n  var treeProps = {};\n\n  if (treeLoadedKeys) {\n    treeProps.loadedKeys = treeLoadedKeys;\n  }\n\n  if (mergedExpandedKeys) {\n    treeProps.expandedKeys = mergedExpandedKeys;\n  }\n\n  return React.createElement(\"div\", {\n    onMouseDown: onListMouseDown\n  }, activeEntity && open && React.createElement(\"span\", {\n    style: HIDDEN_STYLE,\n    \"aria-live\": \"assertive\"\n  }, activeEntity.data.value), React.createElement(Tree, Object.assign({\n    ref: treeRef,\n    focusable: false,\n    prefixCls: \"\".concat(prefixCls, \"-tree\"),\n    treeData: memoOptions,\n    height: height,\n    itemHeight: itemHeight,\n    multiple: multiple,\n    icon: treeIcon,\n    showIcon: showTreeIcon,\n    switcherIcon: switcherIcon,\n    showLine: treeLine,\n    loadData: searchValue ? null : loadData,\n    motion: treeMotion,\n    // We handle keys by out instead tree self\n    checkable: checkable,\n    checkStrictly: true,\n    checkedKeys: mergedCheckedKeys,\n    selectedKeys: !checkable ? valueKeys : [],\n    defaultExpandAll: treeDefaultExpandAll\n  }, treeProps, {\n    // Proxy event out\n    onActiveChange: setActiveKey,\n    onSelect: onInternalSelect,\n    onCheck: onInternalSelect,\n    onExpand: onInternalExpand,\n    onLoad: onTreeLoad,\n    filterTreeNode: filterTreeNode\n  })));\n};\n\nvar RefOptionList = React.forwardRef(OptionList);\nRefOptionList.displayName = 'OptionList';\nexport default RefOptionList;","map":{"version":3,"sources":["/Users/abdurauf/Desktop/毕业设计/orginal/restaurant-management-system/plov/node_modules/rc-tree-select/es/OptionList.js"],"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","len","length","arr2","Symbol","iterator","_arr","_n","_d","_e","undefined","_i","_s","next","done","push","value","err","isArray","React","KeyCode","useMemo","Tree","SelectContext","useKeyValueMapping","useKeyValueMap","HIDDEN_STYLE","width","height","display","overflow","opacity","border","padding","margin","OptionList","props","ref","prefixCls","itemHeight","options","flattenOptions","multiple","searchValue","onSelect","onToggleOpen","open","notFoundContent","_React$useContext","useContext","checkable","checkedKeys","halfCheckedKeys","treeExpandedKeys","treeDefaultExpandAll","treeDefaultExpandedKeys","onTreeExpand","treeIcon","showTreeIcon","switcherIcon","treeLine","treeNodeFilterProp","loadData","treeLoadedKeys","treeMotion","onTreeLoad","treeRef","useRef","memoOptions","prev","_useKeyValueMap","_useKeyValueMap2","cacheKeyMap","cacheValueMap","_useKeyValueMapping","_useKeyValueMapping2","getEntityByKey","getEntityByValue","valueKeys","map","val","entity","key","mergedCheckedKeys","checked","halfChecked","useEffect","_treeRef$current","current","scrollTo","lowerSearchValue","String","toLowerCase","filterTreeNode","treeNode","includes","_React$useState","useState","_React$useState2","expandedKeys","setExpandedKeys","_React$useState3","_React$useState4","searchExpandedKeys","setSearchExpandedKeys","mergedExpandedKeys","onInternalExpand","keys","onListMouseDown","event","preventDefault","onInternalSelect","_","_ref","node","data","selected","_React$useState5","_React$useState6","activeKey","setActiveKey","activeEntity","useImperativeHandle","onKeyDown","_treeRef$current2","which","UP","DOWN","LEFT","RIGHT","ENTER","ESC","onKeyUp","createElement","role","className","concat","onMouseDown","treeProps","loadedKeys","style","assign","focusable","treeData","icon","showIcon","showLine","motion","checkStrictly","selectedKeys","defaultExpandAll","onActiveChange","onCheck","onExpand","onLoad","RefOptionList","forwardRef","displayName"],"mappings":"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","sourcesContent":["function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React from 'react';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport useMemo from \"rc-util/es/hooks/useMemo\";\nimport Tree from 'rc-tree';\nimport { SelectContext } from './Context';\nimport useKeyValueMapping from './hooks/useKeyValueMapping';\nimport useKeyValueMap from './hooks/useKeyValueMap';\nvar HIDDEN_STYLE = {\n  width: 0,\n  height: 0,\n  display: 'flex',\n  overflow: 'hidden',\n  opacity: 0,\n  border: 0,\n  padding: 0,\n  margin: 0\n};\n\nvar OptionList = function OptionList(props, ref) {\n  var prefixCls = props.prefixCls,\n      height = props.height,\n      itemHeight = props.itemHeight,\n      options = props.options,\n      flattenOptions = props.flattenOptions,\n      multiple = props.multiple,\n      searchValue = props.searchValue,\n      onSelect = props.onSelect,\n      onToggleOpen = props.onToggleOpen,\n      open = props.open,\n      notFoundContent = props.notFoundContent;\n\n  var _React$useContext = React.useContext(SelectContext),\n      checkable = _React$useContext.checkable,\n      checkedKeys = _React$useContext.checkedKeys,\n      halfCheckedKeys = _React$useContext.halfCheckedKeys,\n      treeExpandedKeys = _React$useContext.treeExpandedKeys,\n      treeDefaultExpandAll = _React$useContext.treeDefaultExpandAll,\n      treeDefaultExpandedKeys = _React$useContext.treeDefaultExpandedKeys,\n      onTreeExpand = _React$useContext.onTreeExpand,\n      treeIcon = _React$useContext.treeIcon,\n      showTreeIcon = _React$useContext.showTreeIcon,\n      switcherIcon = _React$useContext.switcherIcon,\n      treeLine = _React$useContext.treeLine,\n      treeNodeFilterProp = _React$useContext.treeNodeFilterProp,\n      loadData = _React$useContext.loadData,\n      treeLoadedKeys = _React$useContext.treeLoadedKeys,\n      treeMotion = _React$useContext.treeMotion,\n      onTreeLoad = _React$useContext.onTreeLoad;\n\n  var treeRef = React.useRef();\n  var memoOptions = useMemo(function () {\n    return options;\n  }, [open, options], function (prev, next) {\n    return next[0] && prev[1] !== next[1];\n  });\n\n  var _useKeyValueMap = useKeyValueMap(flattenOptions),\n      _useKeyValueMap2 = _slicedToArray(_useKeyValueMap, 2),\n      cacheKeyMap = _useKeyValueMap2[0],\n      cacheValueMap = _useKeyValueMap2[1];\n\n  var _useKeyValueMapping = useKeyValueMapping(cacheKeyMap, cacheValueMap),\n      _useKeyValueMapping2 = _slicedToArray(_useKeyValueMapping, 2),\n      getEntityByKey = _useKeyValueMapping2[0],\n      getEntityByValue = _useKeyValueMapping2[1]; // ========================== Values ==========================\n\n\n  var valueKeys = React.useMemo(function () {\n    return checkedKeys.map(function (val) {\n      var entity = getEntityByValue(val);\n      return entity ? entity.key : null;\n    });\n  }, [checkedKeys]);\n  var mergedCheckedKeys = React.useMemo(function () {\n    if (!checkable) {\n      return null;\n    }\n\n    return {\n      checked: valueKeys,\n      halfChecked: halfCheckedKeys\n    };\n  }, [valueKeys, halfCheckedKeys, checkable]); // ========================== Scroll ==========================\n\n  React.useEffect(function () {\n    // Single mode should scroll to current key\n    if (open && !multiple && valueKeys.length) {\n      var _treeRef$current;\n\n      (_treeRef$current = treeRef.current) === null || _treeRef$current === void 0 ? void 0 : _treeRef$current.scrollTo({\n        key: valueKeys[0]\n      });\n    }\n  }, [open]); // ========================== Search ==========================\n\n  var lowerSearchValue = String(searchValue).toLowerCase();\n\n  var filterTreeNode = function filterTreeNode(treeNode) {\n    if (!lowerSearchValue) {\n      return false;\n    }\n\n    return String(treeNode[treeNodeFilterProp]).toLowerCase().includes(lowerSearchValue);\n  }; // =========================== Keys ===========================\n\n\n  var _React$useState = React.useState(treeDefaultExpandedKeys),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      expandedKeys = _React$useState2[0],\n      setExpandedKeys = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      searchExpandedKeys = _React$useState4[0],\n      setSearchExpandedKeys = _React$useState4[1];\n\n  var mergedExpandedKeys = treeExpandedKeys || (searchValue ? searchExpandedKeys : expandedKeys);\n  React.useEffect(function () {\n    if (searchValue) {\n      setSearchExpandedKeys(flattenOptions.map(function (o) {\n        return o.key;\n      }));\n    }\n  }, [searchValue]);\n\n  var onInternalExpand = function onInternalExpand(keys) {\n    setExpandedKeys(keys);\n    setSearchExpandedKeys(keys);\n\n    if (onTreeExpand) {\n      onTreeExpand(keys);\n    }\n  }; // ========================== Events ==========================\n\n\n  var onListMouseDown = function onListMouseDown(event) {\n    event.preventDefault();\n  };\n\n  var onInternalSelect = function onInternalSelect(_, _ref) {\n    var key = _ref.node.key;\n    var entity = getEntityByKey(key, checkable ? 'checkbox' : 'select');\n\n    if (entity !== null) {\n      onSelect(entity.data.value, {\n        selected: !checkedKeys.includes(entity.data.value)\n      });\n    }\n\n    if (!multiple) {\n      onToggleOpen(false);\n    }\n  }; // ========================= Keyboard =========================\n\n\n  var _React$useState5 = React.useState(null),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      activeKey = _React$useState6[0],\n      setActiveKey = _React$useState6[1];\n\n  var activeEntity = getEntityByKey(activeKey);\n  React.useImperativeHandle(ref, function () {\n    return {\n      onKeyDown: function onKeyDown(event) {\n        var _treeRef$current2;\n\n        var which = event.which;\n\n        switch (which) {\n          // >>> Arrow keys\n          case KeyCode.UP:\n          case KeyCode.DOWN:\n          case KeyCode.LEFT:\n          case KeyCode.RIGHT:\n            (_treeRef$current2 = treeRef.current) === null || _treeRef$current2 === void 0 ? void 0 : _treeRef$current2.onKeyDown(event);\n            break;\n          // >>> Select item\n\n          case KeyCode.ENTER:\n            {\n              if (activeEntity !== null) {\n                onInternalSelect(null, {\n                  node: {\n                    key: activeKey\n                  },\n                  selected: !checkedKeys.includes(activeEntity.data.value)\n                });\n              }\n\n              break;\n            }\n          // >>> Close\n\n          case KeyCode.ESC:\n            {\n              onToggleOpen(false);\n            }\n        }\n      },\n      onKeyUp: function onKeyUp() {}\n    };\n  }); // ========================== Render ==========================\n\n  if (memoOptions.length === 0) {\n    return React.createElement(\"div\", {\n      role: \"listbox\",\n      className: \"\".concat(prefixCls, \"-empty\"),\n      onMouseDown: onListMouseDown\n    }, notFoundContent);\n  }\n\n  var treeProps = {};\n\n  if (treeLoadedKeys) {\n    treeProps.loadedKeys = treeLoadedKeys;\n  }\n\n  if (mergedExpandedKeys) {\n    treeProps.expandedKeys = mergedExpandedKeys;\n  }\n\n  return React.createElement(\"div\", {\n    onMouseDown: onListMouseDown\n  }, activeEntity && open && React.createElement(\"span\", {\n    style: HIDDEN_STYLE,\n    \"aria-live\": \"assertive\"\n  }, activeEntity.data.value), React.createElement(Tree, Object.assign({\n    ref: treeRef,\n    focusable: false,\n    prefixCls: \"\".concat(prefixCls, \"-tree\"),\n    treeData: memoOptions,\n    height: height,\n    itemHeight: itemHeight,\n    multiple: multiple,\n    icon: treeIcon,\n    showIcon: showTreeIcon,\n    switcherIcon: switcherIcon,\n    showLine: treeLine,\n    loadData: searchValue ? null : loadData,\n    motion: treeMotion,\n    // We handle keys by out instead tree self\n    checkable: checkable,\n    checkStrictly: true,\n    checkedKeys: mergedCheckedKeys,\n    selectedKeys: !checkable ? valueKeys : [],\n    defaultExpandAll: treeDefaultExpandAll\n  }, treeProps, {\n    // Proxy event out\n    onActiveChange: setActiveKey,\n    onSelect: onInternalSelect,\n    onCheck: onInternalSelect,\n    onExpand: onInternalExpand,\n    onLoad: onTreeLoad,\n    filterTreeNode: filterTreeNode\n  })));\n};\n\nvar RefOptionList = React.forwardRef(OptionList);\nRefOptionList.displayName = 'OptionList';\nexport default RefOptionList;"]},"metadata":{},"sourceType":"module"}