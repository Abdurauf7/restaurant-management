{"ast":null,"code":"var _jsxFileName = \"/Users/abdurauf/Desktop/\\u6BD5\\u4E1A\\u8BBE\\u8BA1/orginal/restaurant-management-system/plov/src/components/Admin/components/Dish.js\";\nimport React, { Component, Fragment } from \"react\";\nimport { Layout, Table, Button, InputNumber, Input, Form, Row, Col } from \"antd\";\nimport { Resizable } from \"react-resizable\"; // for resizing\n\nconst ResizeableTitle = props => {\n  const {\n    onResize,\n    width,\n    ...restProps\n  } = props;\n\n  if (!width) {\n    return React.createElement(\"th\", Object.assign({}, restProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }));\n  }\n\n  return React.createElement(Resizable, {\n    width: width,\n    height: 0,\n    onResize: onResize,\n    draggableOpts: {\n      enableUserSelectHack: false\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(\"th\", Object.assign({}, restProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  })));\n}; // for editable\n\n\nconst EditableContext = React.createContext();\n\nclass EditableCell extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.getInput = () => {\n      if (this.props.inputType === \"number\") {\n        return React.createElement(InputNumber, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(Input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      });\n    };\n\n    this.renderCell = ({\n      getFieldDecorator\n    }) => {\n      const {\n        editing,\n        dataIndex,\n        title,\n        inputType,\n        record,\n        index,\n        children,\n        ...restProps\n      } = this.props;\n      return React.createElement(\"td\", Object.assign({}, restProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }), editing ? React.createElement(Form.Item, {\n        style: {\n          margin: 0\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, getFieldDecorator(dataIndex, {\n        rules: [{\n          required: true,\n          message: `Please Input ${title}!`\n        }],\n        initialValue: record[dataIndex]\n      })(this.getInput())) : children);\n    };\n  }\n\n  render() {\n    return React.createElement(EditableContext.Consumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, this.renderCell);\n  }\n\n}\n\nconst {\n  Content\n} = Layout;\n\nclass Dish extends Component {\n  constructor(props) {\n    super(props);\n\n    this.isEditing = record => record.key === this.state.editingKey;\n\n    this.cancel = () => {\n      this.setState({\n        editingKey: \"\"\n      });\n    };\n\n    this.handleDelete = key => {\n      const dataSource = [...this.state.dataSource];\n      this.setState({\n        dataSource: dataSource.filter(item => item.key !== key)\n      });\n    };\n\n    this.components = {\n      header: {\n        cell: ResizeableTitle\n      },\n      body: {\n        cell: EditableCell\n      }\n    };\n\n    this.handleAdd = () => {\n      const {\n        count,\n        dataSource,\n        name,\n        price,\n        type\n      } = this.state;\n      const newData = {\n        key: count,\n        name: name,\n        price: price + \"$\",\n        type: type\n      };\n\n      if (name !== null && price !== null && type !== null) {\n        this.setState({\n          dataSource: [...dataSource, newData],\n          count: count + 1\n        });\n      }\n    };\n\n    this.handleResize = index => (e, {\n      size\n    }) => {\n      this.setState(({\n        columns\n      }) => {\n        const nextColumns = [...columns];\n        nextColumns[index] = { ...nextColumns[index],\n          width: size.width\n        };\n        return {\n          columns: nextColumns\n        };\n      });\n    };\n\n    this.state = {\n      columns: [{\n        title: \"Name\",\n        dataIndex: \"name\",\n        editable: true\n      }, {\n        title: \"Price\",\n        dataIndex: \"price\",\n        editable: true\n      }, {\n        title: \"Type\",\n        dataIndex: \"type\",\n        editable: true\n      }, {\n        title: \"Delete\",\n        dataIndex: \"operation\",\n        render: (text, record) => this.state.dataSource.length >= 1 ? React.createElement(Button, {\n          size: \"small\",\n          style: {\n            width: \"60px\"\n          },\n          onClick: () => this.handleDelete(record.key),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, \"Delete\") : null\n      }, {\n        title: \"Edit\",\n        dataIndex: \"operation\",\n        render: (text, record) => {\n          const {\n            editingKey\n          } = this.state;\n          const editable = this.isEditing(record);\n          return editable ? React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 127\n            },\n            __self: this\n          }, React.createElement(EditableContext.Consumer, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 128\n            },\n            __self: this\n          }, form => React.createElement(Row, {\n            gutter: 22,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 130\n            },\n            __self: this\n          }, React.createElement(Col, {\n            span: 11,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 131\n            },\n            __self: this\n          }, React.createElement(Button, {\n            size: \"small\",\n            onClick: () => this.save(form, record.key),\n            style: {\n              width: \"60px\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 132\n            },\n            __self: this\n          }, \"Save\")), React.createElement(Col, {\n            span: 11,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 140\n            },\n            __self: this\n          }, React.createElement(Button, {\n            size: \"small\",\n            style: {\n              width: \"70px\"\n            },\n            onClick: () => this.cancel(record.key),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 141\n            },\n            __self: this\n          }, \"Cancel\"))))) : React.createElement(Button, {\n            size: \"small\",\n            style: {\n              width: \"60px\"\n            },\n            disabled: editingKey !== \"\",\n            onClick: () => this.edit(record.key),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 154\n            },\n            __self: this\n          }, \"Edit\");\n        }\n      }],\n      dataSource: [],\n      count: 0,\n      editingKey: \"\",\n      name: \"\",\n      price: \"\",\n      type: \"\"\n    };\n    this.namehandleChange = this.namehandleChange.bind(this);\n    this.priceHandleChange = this.priceHandleChange.bind(this);\n    this.typehandleChange = this.typehandleChange.bind(this);\n  }\n\n  namehandleChange(event) {\n    this.setState({\n      name: event.target.value\n    });\n  }\n\n  priceHandleChange(price) {\n    this.setState({\n      price: price\n    });\n  }\n\n  typehandleChange(type) {\n    this.setState({\n      type: type\n    });\n  }\n\n  edit(key) {\n    this.setState({\n      editingKey: key\n    });\n  }\n\n  save(form, key) {\n    form.validateFields((error, row) => {\n      if (error) {\n        return;\n      }\n\n      const newData = [...this.state.dataSource];\n      const index = newData.findIndex(item => key === item.key);\n\n      if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, { ...item,\n          ...row\n        });\n        this.setState({\n          dataSource: newData,\n          editingKey: \"\"\n        });\n      } else {\n        newData.push(row);\n        this.setState({\n          dataSource: newData,\n          editingKey: \"\"\n        });\n      }\n    });\n  }\n\n  render() {\n    const {\n      getFieldDecorator\n    } = this.props.form;\n    const columns = this.state.columns.map((col, index) => {\n      if (!col.editable) {\n        return col;\n      }\n\n      return { ...col,\n        onHeaderCell: column => ({\n          width: column.width,\n          onResize: this.handleResize(index)\n        }),\n        onCell: record => ({\n          record,\n          inputType: col.dataIndex === \"age\" ? \"number\" : \"text\",\n          dataIndex: col.dataIndex,\n          title: col.title,\n          editing: this.isEditing(record)\n        })\n      };\n    });\n    const {\n      dataSource\n    } = this.state;\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, React.createElement(Content, {\n      style: {\n        margin: \"2em 16px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        background: \"#fff\",\n        padding: 24,\n        minHeight: 280\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, React.createElement(Row, {\n      gutter: 25,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }, React.createElement(Col, {\n      span: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }, getFieldDecorator(\"name\", {\n      rules: [{\n        required: true,\n        message: \"Please input your username!\"\n      }]\n    })(React.createElement(Input, {\n      placeholder: \"name\",\n      value: this.state.name,\n      onChange: this.namehandleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    })))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, React.createElement(Col, {\n      span: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, getFieldDecorator(\"price\", {\n      rules: [{\n        required: true,\n        message: \"Please input your username!\"\n      }]\n    })(React.createElement(InputNumber, {\n      placeholder: \"price\",\n      value: this.state.price,\n      onChange: this.priceHandleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    })))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, React.createElement(Col, {\n      span: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, getFieldDecorator(\"type\", {\n      rules: [{\n        required: true,\n        message: \"Please input your username!\"\n      }]\n    })(React.createElement(Input, {\n      placeholder: \"type\",\n      value: this.state.type,\n      onChange: this.typehandleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    })))), React.createElement(Col, {\n      span: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.handleAdd,\n      type: \"primary\",\n      style: {\n        marginBottom: 16,\n        width: \"100px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, \"Add a row\")))), React.createElement(EditableContext.Provider, {\n      value: this.props.form,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    }, React.createElement(Table, {\n      components: this.components,\n      columns: columns,\n      dataSource: dataSource,\n      bordered: true,\n      rowClassName: \"editable-row\",\n      title: () => \"Dish Menu\",\n      footer: () => \"Footer\",\n      pagination: false,\n      scroll: {\n        y: 140\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nconst WrappedHorizontalLoginForm = Form.create()(Dish);\nexport default WrappedHorizontalLoginForm;","map":{"version":3,"sources":["/Users/abdurauf/Desktop/毕业设计/orginal/restaurant-management-system/plov/src/components/Admin/components/Dish.js"],"names":["React","Component","Fragment","Layout","Table","Button","InputNumber","Input","Form","Row","Col","Resizable","ResizeableTitle","props","onResize","width","restProps","enableUserSelectHack","EditableContext","createContext","EditableCell","getInput","inputType","renderCell","getFieldDecorator","editing","dataIndex","title","record","index","children","margin","rules","required","message","initialValue","render","Content","Dish","constructor","isEditing","key","state","editingKey","cancel","setState","handleDelete","dataSource","filter","item","components","header","cell","body","handleAdd","count","name","price","type","newData","handleResize","e","size","columns","nextColumns","editable","text","length","form","save","edit","namehandleChange","bind","priceHandleChange","typehandleChange","event","target","value","validateFields","error","row","findIndex","splice","push","map","col","onHeaderCell","column","onCell","background","padding","minHeight","marginBottom","y","WrappedHorizontalLoginForm","create"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport {\n  Layout,\n  Table,\n  Button,\n  InputNumber,\n  Input,\n  Form,\n  Row,\n  Col\n} from \"antd\";\nimport { Resizable } from \"react-resizable\";\n\n// for resizing\nconst ResizeableTitle = props => {\n  const { onResize, width, ...restProps } = props;\n\n  if (!width) {\n    return <th {...restProps} />;\n  }\n\n  return (\n    <Resizable\n      width={width}\n      height={0}\n      onResize={onResize}\n      draggableOpts={{ enableUserSelectHack: false }}\n    >\n      <th {...restProps} />\n    </Resizable>\n  );\n};\n\n// for editable\nconst EditableContext = React.createContext();\n\nclass EditableCell extends React.Component {\n  getInput = () => {\n    if (this.props.inputType === \"number\") {\n      return <InputNumber />;\n    }\n    return <Input />;\n  };\n\n  renderCell = ({ getFieldDecorator }) => {\n    const {\n      editing,\n      dataIndex,\n      title,\n      inputType,\n      record,\n      index,\n      children,\n      ...restProps\n    } = this.props;\n    return (\n      <td {...restProps}>\n        {editing ? (\n          <Form.Item style={{ margin: 0 }}>\n            {getFieldDecorator(dataIndex, {\n              rules: [\n                {\n                  required: true,\n                  message: `Please Input ${title}!`\n                }\n              ],\n              initialValue: record[dataIndex]\n            })(this.getInput())}\n          </Form.Item>\n        ) : (\n          children\n        )}\n      </td>\n    );\n  };\n\n  render() {\n    return (\n      <EditableContext.Consumer>{this.renderCell}</EditableContext.Consumer>\n    );\n  }\n}\n\nconst { Content } = Layout;\nclass Dish extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      columns: [\n        {\n          title: \"Name\",\n          dataIndex: \"name\",\n          editable: true\n        },\n        {\n          title: \"Price\",\n          dataIndex: \"price\",\n          editable: true\n        },\n        {\n          title: \"Type\",\n          dataIndex: \"type\",\n          editable: true\n        },\n        {\n          title: \"Delete\",\n          dataIndex: \"operation\",\n          render: (text, record) =>\n            this.state.dataSource.length >= 1 ? (\n              <Button\n                size=\"small\"\n                style={{ width: \"60px\" }}\n                onClick={() => this.handleDelete(record.key)}\n              >\n                Delete\n              </Button>\n            ) : null\n        },\n        {\n          title: \"Edit\",\n          dataIndex: \"operation\",\n          render: (text, record) => {\n            const { editingKey } = this.state;\n            const editable = this.isEditing(record);\n            return editable ? (\n              <span>\n                <EditableContext.Consumer>\n                  {form => (\n                    <Row gutter={22}>\n                      <Col span={11}>\n                        <Button\n                          size=\"small\"\n                          onClick={() => this.save(form, record.key)}\n                          style={{ width: \"60px\" }}\n                        >\n                          Save\n                        </Button>\n                      </Col>\n                      <Col span={11}>\n                        <Button\n                          size=\"small\"\n                          style={{ width: \"70px\" }}\n                          onClick={() => this.cancel(record.key)}\n                        >\n                          Cancel\n                        </Button>\n                      </Col>\n                    </Row>\n                  )}\n                </EditableContext.Consumer>\n              </span>\n            ) : (\n              <Button\n                size=\"small\"\n                style={{ width: \"60px\" }}\n                disabled={editingKey !== \"\"}\n                onClick={() => this.edit(record.key)}\n              >\n                Edit\n              </Button>\n            );\n          }\n        }\n      ],\n\n      dataSource: [],\n      count: 0,\n      editingKey: \"\",\n      name: \"\",\n      price: \"\",\n      type: \"\"\n    };\n    this.namehandleChange = this.namehandleChange.bind(this);\n    this.priceHandleChange = this.priceHandleChange.bind(this);\n    this.typehandleChange = this.typehandleChange.bind(this);\n  }\n\n  namehandleChange(event) {\n    this.setState({\n      name: event.target.value\n    });\n  }\n  priceHandleChange(price) {\n    this.setState({\n      price: price\n    });\n  }\n\n  typehandleChange(type) {\n    this.setState({\n      type: type\n    });\n  }\n\n  isEditing = record => record.key === this.state.editingKey;\n\n  cancel = () => {\n    this.setState({ editingKey: \"\" });\n  };\n  edit(key) {\n    this.setState({ editingKey: key });\n  }\n\n  handleDelete = key => {\n    const dataSource = [...this.state.dataSource];\n    this.setState({ dataSource: dataSource.filter(item => item.key !== key) });\n  };\n  save(form, key) {\n    form.validateFields((error, row) => {\n      if (error) {\n        return;\n      }\n      const newData = [...this.state.dataSource];\n      const index = newData.findIndex(item => key === item.key);\n      if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, {\n          ...item,\n          ...row\n        });\n        this.setState({ dataSource: newData, editingKey: \"\" });\n      } else {\n        newData.push(row);\n        this.setState({ dataSource: newData, editingKey: \"\" });\n      }\n    });\n  }\n  components = {\n    header: {\n      cell: ResizeableTitle\n    },\n    body: {\n      cell: EditableCell\n    }\n  };\n  handleAdd = () => {\n    const { count, dataSource, name, price, type } = this.state;\n    const newData = {\n      key: count,\n      name: name,\n      price: price + \"$\",\n      type: type\n    };\n    if (name !== null && price !== null && type !== null) {\n      this.setState({\n        dataSource: [...dataSource, newData],\n        count: count + 1\n      });\n    }\n  };\n\n  handleResize = index => (e, { size }) => {\n    this.setState(({ columns }) => {\n      const nextColumns = [...columns];\n      nextColumns[index] = {\n        ...nextColumns[index],\n        width: size.width\n      };\n      return { columns: nextColumns };\n    });\n  };\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    const columns = this.state.columns.map((col, index) => {\n      if (!col.editable) {\n        return col;\n      }\n      return {\n        ...col,\n        onHeaderCell: column => ({\n          width: column.width,\n          onResize: this.handleResize(index)\n        }),\n        onCell: record => ({\n          record,\n          inputType: col.dataIndex === \"age\" ? \"number\" : \"text\",\n          dataIndex: col.dataIndex,\n          title: col.title,\n          editing: this.isEditing(record)\n        })\n      };\n    });\n    const { dataSource } = this.state;\n    return (\n      <Fragment>\n        <Content style={{ margin: \"2em 16px\" }}>\n          <div style={{ background: \"#fff\", padding: 24, minHeight: 280 }}>\n            <Form>\n              <Row gutter={25}>\n                <Form.Item>\n                  <Col span={6}>\n                    {getFieldDecorator(\"name\", {\n                      rules: [\n                        {\n                          required: true,\n                          message: \"Please input your username!\"\n                        }\n                      ]\n                    })(\n                      <Input\n                        placeholder=\"name\"\n                        value={this.state.name}\n                        onChange={this.namehandleChange}\n                      />\n                    )}\n                  </Col>\n                </Form.Item>\n                <Form.Item>\n                  <Col span={6}>\n                    {getFieldDecorator(\"price\", {\n                      rules: [\n                        {\n                          required: true,\n                          message: \"Please input your username!\"\n                        }\n                      ]\n                    })(\n                      <InputNumber\n                        placeholder=\"price\"\n                        value={this.state.price}\n                        onChange={this.priceHandleChange}\n                      />\n                    )}\n                  </Col>\n                </Form.Item>\n                <Form.Item>\n                  <Col span={6}>\n                    {getFieldDecorator(\"type\", {\n                      rules: [\n                        {\n                          required: true,\n                          message: \"Please input your username!\"\n                        }\n                      ]\n                    })(\n                      <Input\n                        placeholder=\"type\"\n                        value={this.state.type}\n                        onChange={this.typehandleChange}\n                      />\n                    )}\n                  </Col>\n                </Form.Item>\n                <Col span={6}>\n                  <Button\n                    onClick={this.handleAdd}\n                    type=\"primary\"\n                    style={{ marginBottom: 16, width: \"100px\" }}\n                  >\n                    Add a row\n                  </Button>\n                </Col>\n              </Row>\n            </Form>\n\n            <EditableContext.Provider value={this.props.form}>\n              <Table\n                components={this.components}\n                columns={columns}\n                dataSource={dataSource}\n                bordered\n                rowClassName=\"editable-row\"\n                title={() => \"Dish Menu\"}\n                footer={() => \"Footer\"}\n                pagination={false}\n                scroll={{ y: 140 }}\n              />\n            </EditableContext.Provider>\n          </div>\n        </Content>\n      </Fragment>\n    );\n  }\n}\n\nconst WrappedHorizontalLoginForm = Form.create()(Dish);\nexport default WrappedHorizontalLoginForm;\n"]},"metadata":{},"sourceType":"module"}