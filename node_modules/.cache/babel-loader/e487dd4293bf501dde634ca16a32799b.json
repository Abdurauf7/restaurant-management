{"ast":null,"code":"var _jsxFileName = \"/Users/abdurauf/Desktop/\\u6BD5\\u4E1A\\u8BBE\\u8BA1/orginal/restaurant-management-system/plov/src/components/Employee/components/Order/components/editModal.jsx\";\n// React\nimport React, { useEffect, useState } from \"react\"; // third part\n\nimport { Modal, Form, Select, Input, TimePicker, TreeSelect } from \"antd\"; // Services\n\nimport { getTable } from \"../../../../../services/tableServices\";\nimport { getDishes } from \"../../../../../services/dishServices\"; // custom\n\nimport { openNotification } from \"../../../../custom\";\nconst layout = {\n  labelCol: {\n    span: 5\n  },\n  wrapperCol: {\n    span: 16\n  }\n};\nconst {\n  TreeNode\n} = TreeSelect;\n\nconst EditModal = ({\n  editableData,\n  visible,\n  handleUpdate,\n  onClose\n}) => {\n  const [form] = Form.useForm();\n  const [tableNumber, setTableNumber] = useState([]);\n  const [orders, setOrders] = useState([]);\n  const [customer] = useState(editableData.customer);\n\n  const fetchTableNumber = async () => {\n    try {\n      await getTable().then(res => res.data).then(data => setTableNumber(data));\n    } catch (error) {\n      openNotification(\"error\", \"Cant get tables\", \"Check connection\");\n    }\n  };\n\n  const fetchOrders = async () => {\n    try {\n      await getDishes().then(res => res.data).then(data => setOrders(data));\n    } catch (error) {}\n  };\n\n  useEffect(() => {\n    fetchTableNumber();\n    fetchOrders();\n  }, []);\n  return React.createElement(Modal, {\n    closable: false,\n    visible: visible,\n    okText: \"Edit\",\n    cancelText: \"Cancel\",\n    onCancel: onClose,\n    onOk: () => {\n      form.validateFields().then(values => {\n        form.resetFields();\n        handleUpdate(values);\n      }).catch(info => {\n        console.log(\"Validate Failed:\", info);\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(Form, Object.assign({}, layout, {\n    hideRequiredMark: true,\n    onFinish: handleUpdate,\n    form: form // initialValues={{\n    //   id: editableData.id,\n    //   table_number: editableData.table,\n    //   // customer_name: editableData.customer,\n    //   dish: editableData.ordered_items,\n    //   price: editableData.price,\n    // }}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), React.createElement(Form.Item, {\n    name: \"id\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"Edit Orders\")), React.createElement(Form.Item, {\n    label: \"Table Number\",\n    name: \"table_number\",\n    rules: [{\n      required: true,\n      message: \"Enter Table Number\"\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(Select, {\n    placeholder: \"select table number\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, tableNumber.map(table => React.createElement(Select.Option, {\n    key: table.id,\n    value: table.table_number,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, table.table_number)))), React.createElement(Form.Item, {\n    label: \"Customer\",\n    name: \"customer_name\",\n    rules: [{\n      required: true,\n      message: \"Enter Customer Name\"\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(Input, {\n    placeholder: \"Customer Name\",\n    allowClear: true,\n    value: editableData.customer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  })), React.createElement(Form.Item, {\n    label: \"Order\",\n    name: \"dish\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(TreeSelect, {\n    showSearch: true,\n    style: {\n      width: \"100%\"\n    },\n    dropdownStyle: {\n      maxHeight: 400,\n      overflow: \"auto\"\n    },\n    placeholder: \"Please select\",\n    allowClear: true,\n    multiple: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, orders.map(or => React.createElement(TreeNode, {\n    value: or.name,\n    title: or.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  })))), React.createElement(Form.Item, {\n    label: \"Price\",\n    name: \"price\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(TreeSelect, {\n    showSearch: true,\n    style: {\n      width: \"100%\"\n    },\n    dropdownStyle: {\n      maxHeight: 400,\n      overflow: \"auto\"\n    },\n    placeholder: \"Please select\",\n    allowClear: true,\n    multiple: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, orders.map(or => React.createElement(TreeNode, {\n    selectable: false,\n    value: or.name,\n    title: or.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(TreeNode, {\n    value: or.price,\n    title: or.price,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }))))), React.createElement(Form.Item, {\n    label: \"Time\",\n    name: \"time\",\n    placeholder: \"select time\",\n    rules: [{\n      required: true,\n      message: \"Enter ordered time\"\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, React.createElement(TimePicker, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }))));\n};\n\nexport default EditModal;","map":{"version":3,"sources":["/Users/abdurauf/Desktop/毕业设计/orginal/restaurant-management-system/plov/src/components/Employee/components/Order/components/editModal.jsx"],"names":["React","useEffect","useState","Modal","Form","Select","Input","TimePicker","TreeSelect","getTable","getDishes","openNotification","layout","labelCol","span","wrapperCol","TreeNode","EditModal","editableData","visible","handleUpdate","onClose","form","useForm","tableNumber","setTableNumber","orders","setOrders","customer","fetchTableNumber","then","res","data","error","fetchOrders","validateFields","values","resetFields","catch","info","console","log","required","message","map","table","id","table_number","width","maxHeight","overflow","or","name","price"],"mappings":"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","sourcesContent":["// React\nimport React, { useEffect, useState } from \"react\";\n\n// third part\nimport { Modal, Form, Select, Input, TimePicker, TreeSelect } from \"antd\";\n\n// Services\nimport { getTable } from \"../../../../../services/tableServices\";\nimport { getDishes } from \"../../../../../services/dishServices\";\n// custom\nimport { openNotification } from \"../../../../custom\";\n\nconst layout = {\n  labelCol: {\n    span: 5,\n  },\n  wrapperCol: {\n    span: 16,\n  },\n};\nconst { TreeNode } = TreeSelect;\nconst EditModal = ({ editableData, visible, handleUpdate, onClose }) => {\n  const [form] = Form.useForm();\n  const [tableNumber, setTableNumber] = useState([]);\n  const [orders, setOrders] = useState([]);\n\n  const [customer] = useState(editableData.customer);\n\n  const fetchTableNumber = async () => {\n    try {\n      await getTable()\n        .then((res) => res.data)\n        .then((data) => setTableNumber(data));\n    } catch (error) {\n      openNotification(\"error\", \"Cant get tables\", \"Check connection\");\n    }\n  };\n  const fetchOrders = async () => {\n    try {\n      await getDishes()\n        .then((res) => res.data)\n        .then((data) => setOrders(data));\n    } catch (error) {}\n  };\n  useEffect(() => {\n    fetchTableNumber();\n    fetchOrders();\n  }, []);\n\n  return (\n    <Modal\n      closable={false}\n      visible={visible}\n      okText=\"Edit\"\n      cancelText=\"Cancel\"\n      onCancel={onClose}\n      onOk={() => {\n        form\n          .validateFields()\n          .then((values) => {\n            form.resetFields();\n            handleUpdate(values);\n          })\n          .catch((info) => {\n            console.log(\"Validate Failed:\", info);\n          });\n      }}\n    >\n      <Form\n        {...layout}\n        hideRequiredMark\n        onFinish={handleUpdate}\n        form={form}\n        // initialValues={{\n        //   id: editableData.id,\n        //   table_number: editableData.table,\n        //   // customer_name: editableData.customer,\n        //   dish: editableData.ordered_items,\n        //   price: editableData.price,\n        // }}\n      >\n        <Form.Item name=\"id\">\n          <h1>Edit Orders</h1>\n        </Form.Item>\n        <Form.Item\n          label=\"Table Number\"\n          name=\"table_number\"\n          rules={[{ required: true, message: \"Enter Table Number\" }]}\n        >\n          <Select placeholder=\"select table number\">\n            {tableNumber.map((table) => (\n              <Select.Option key={table.id} value={table.table_number}>\n                {table.table_number}\n              </Select.Option>\n            ))}\n          </Select>\n        </Form.Item>\n        <Form.Item\n          label=\"Customer\"\n          name=\"customer_name\"\n          rules={[{ required: true, message: \"Enter Customer Name\" }]}\n        >\n          <Input\n            placeholder=\"Customer Name\"\n            allowClear\n            value={editableData.customer}\n          />\n        </Form.Item>\n        <Form.Item label=\"Order\" name=\"dish\">\n          <TreeSelect\n            showSearch\n            style={{ width: \"100%\" }}\n            dropdownStyle={{ maxHeight: 400, overflow: \"auto\" }}\n            placeholder=\"Please select\"\n            allowClear\n            multiple\n          >\n            {orders.map((or) => (\n              <TreeNode value={or.name} title={or.name} />\n            ))}\n          </TreeSelect>\n        </Form.Item>\n        <Form.Item label=\"Price\" name=\"price\">\n          <TreeSelect\n            showSearch\n            style={{ width: \"100%\" }}\n            dropdownStyle={{ maxHeight: 400, overflow: \"auto\" }}\n            placeholder=\"Please select\"\n            allowClear\n            multiple\n          >\n            {orders.map((or) => (\n              <TreeNode selectable={false} value={or.name} title={or.name}>\n                <TreeNode value={or.price} title={or.price} />\n              </TreeNode>\n            ))}\n          </TreeSelect>\n        </Form.Item>\n        <Form.Item\n          label=\"Time\"\n          name=\"time\"\n          placeholder=\"select time\"\n          rules={[{ required: true, message: \"Enter ordered time\" }]}\n        >\n          <TimePicker />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n\nexport default EditModal;\n"]},"metadata":{},"sourceType":"module"}