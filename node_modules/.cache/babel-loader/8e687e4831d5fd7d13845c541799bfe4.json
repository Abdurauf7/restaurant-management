{"ast":null,"code":"var _jsxFileName = \"/Users/abdurauf/Desktop/\\u6BD5\\u4E1A\\u8BBE\\u8BA1/orginal/restaurant-management-system/plov/src/components/Admin/components/personal.js\";\n// import React, { Component, Fragment } from \"react\";\n// import {\n//   Layout,\n//   Table,\n//   Button,\n//   InputNumber,\n//   Input,\n//   Form,\n//   Row,\n//   Col\n// } from \"antd\";\n// import { Resizable } from \"react-resizable\";\n// import PersonalDrawer from \"../../common/personalDrawer\";\n// import Title from \"../../common/title\";\n// import \"../../../assets/css/AdminForm.css\";\n// // for resizing\n// const ResizeableTitle = props => {\n//   const { onResize, width, ...restProps } = props;\n//   if (!width) {\n//     return <th {...restProps} />;\n//   }\n//   return (\n//     <Resizable\n//       width={width}\n//       height={0}\n//       onResize={onResize}\n//       draggableOpts={{ enableUserSelectHack: false }}\n//     >\n//       <th {...restProps} />\n//     </Resizable>\n//   );\n// };\n// // for editable\n// const EditableContext = React.createContext();\n// class EditableCell extends React.Component {\n//   getInput = () => {\n//     if (this.props.inputType === \"number\") {\n//       return <InputNumber />;\n//     }\n//     return <Input />;\n//   };\n//   renderCell = ({ getFieldDecorator }) => {\n//     const {\n//       editing,\n//       dataIndex,\n//       title,\n//       inputType,\n//       record,\n//       index,\n//       children,\n//       ...restProps\n//     } = this.props;\n//     return (\n//       <td {...restProps}>\n//         {editing ? (\n//           <Form.Item style={{ margin: 0 }}>\n//             {getFieldDecorator(dataIndex, {\n//               rules: [\n//                 {\n//                   required: true,\n//                   message: `Please Input ${title}!`\n//                 }\n//               ],\n//               initialValue: record[dataIndex]\n//             })(this.getInput())}\n//           </Form.Item>\n//         ) : (\n//           children\n//         )}\n//       </td>\n//     );\n//   };\n//   render() {\n//     return (\n//       <EditableContext.Consumer>{this.renderCell}</EditableContext.Consumer>\n//     );\n//   }\n// }\n// const { Content } = Layout;\n// class Personal extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       columns: [\n//         {\n//           title: \"Name\",\n//           dataIndex: \"name\",\n//           editable: true\n//         },\n//         {\n//           title: \"Salary\",\n//           dataIndex: \"salary\",\n//           editable: true\n//         },\n//         {\n//           title: \"Type\",\n//           dataIndex: \"type\",\n//           editable: true\n//         },\n//         {\n//           title: \"Age\",\n//           dataIndex: \"age\",\n//           editable: true\n//         },\n//         {\n//           title: \"Address\",\n//           dataIndex: \"address\",\n//           editable: true\n//         },\n//         {\n//           title: \"Phone\",\n//           dataIndex: \"phone\",\n//           editable: true\n//         },\n//         {\n//           title: \"Action\",\n//           dataIndex: \"operation\",\n//           render: (text, record) => {\n//             const { editingKey } = this.state;\n//             const editable = this.isEditing(record);\n//             return editable ? (\n//               <span>\n//                 <EditableContext.Consumer>\n//                   {form => (\n//                     <Row gutter={20}>\n//                       <Col span={9}>\n//                         <Button\n//                           size=\"small\"\n//                           onClick={() => this.save(form, record.key)}\n//                           style={{ width: \"60px\" }}\n//                         >\n//                           Save\n//                         </Button>\n//                       </Col>\n//                       <Col span={9}>\n//                         <Button\n//                           size=\"small\"\n//                           style={{ width: \"70px\" }}\n//                           onClick={() => this.cancel(record.key)}\n//                         >\n//                           Cancel\n//                         </Button>\n//                       </Col>\n//                     </Row>\n//                   )}\n//                 </EditableContext.Consumer>\n//               </span>\n//             ) : (\n//               <Fragment>\n//                 <Row>\n//                   <Col span={10}>\n//                     <Button\n//                       type=\"danger\"\n//                       size=\"small\"\n//                       style={{ width: \"60px\" }}\n//                       onClick={() => this.handleDelete(record.key)}\n//                     >\n//                       Delete\n//                     </Button>\n//                   </Col>\n//                   <Col span={8}>\n//                     <Button\n//                       type=\"primary\"\n//                       size=\"small\"\n//                       style={{ width: \"60px\" }}\n//                       disabled={editingKey !== \"\"}\n//                       onClick={() => this.edit(record.key)}\n//                     >\n//                       Edit\n//                     </Button>\n//                   </Col>\n//                 </Row>\n//               </Fragment>\n//             );\n//           }\n//         }\n//       ],\n//       visible: false,\n//       dataSource: [],\n//       key: 0,\n//       editingKey: \"\",\n//       id: \"\",\n//       name: \"\",\n//       salary: \"\",\n//       type: \"\",\n//       age: \"\",\n//       address: \"\",\n//       phone: \"\",\n//       title: \"Personal Menu\"\n//     };\n//   }\n//   namehandleChange = event => {\n//     this.setState({\n//       name: event.target.value\n//     });\n//   };\n//   priceHandleChange = price => {\n//     this.setState({\n//       salary: price\n//     });\n//   };\n//   typehandleChange = type => {\n//     this.setState({\n//       type: type\n//     });\n//   };\n//   agehandleChange = age => {\n//     this.setState({\n//       age: age\n//     });\n//   };\n//   addresshandleChange = event => {\n//     this.setState({\n//       address: event.target.value\n//     });\n//   };\n//   phoneHandleChange = phone => {\n//     this.setState({\n//       phone: phone\n//     });\n//   };\n//   isEditing = record => record.key === this.state.editingKey;\n//   cancel = () => {\n//     this.setState({ editingKey: \"\" });\n//   };\n//   edit(key) {\n//     this.setState({ editingKey: key });\n//   }\n//   handleDelete = key => {\n//     const dataSource = [...this.state.dataSource];\n//     this.setState({ dataSource: dataSource.filter(item => item.key !== key) });\n//   };\n//   showDrawer = () => {\n//     this.setState({\n//       visible: true\n//     });\n//   };\n//   onClose = () => {\n//     this.setState({\n//       visible: false\n//     });\n//   };\n//   save(form, key) {\n//     form.validateFields((error, row) => {\n//       if (error) {\n//         return;\n//       }\n//       const newData = [...this.state.dataSource];\n//       const index = newData.findIndex(item => key === item.key);\n//       if (index > -1) {\n//         const item = newData[index];\n//         newData.splice(index, 1, {\n//           ...item,\n//           ...row\n//         });\n//         this.setState({ dataSource: newData, editingKey: \"\" });\n//       } else {\n//         newData.push(row);\n//         this.setState({ dataSource: newData, editingKey: \"\" });\n//       }\n//     });\n//   }\n//   components = {\n//     header: {\n//       cell: ResizeableTitle\n//     },\n//     body: {\n//       cell: EditableCell\n//     }\n//   };\n//   handleAdd = () => {\n//     const {\n//       key,\n//       dataSource,\n//       name,\n//       salary,\n//       type,\n//       age,\n//       address,\n//       phone\n//     } = this.state;\n//     const newData = {\n//       key: key,\n//       name: name,\n//       salary: salary + \"$\",\n//       type: type,\n//       age: age,\n//       address: address,\n//       phone: phone\n//     };\n//     if (\n//       name !== \"\" &&\n//       salary !== null &&\n//       type !== \"\" &&\n//       age !== null &&\n//       address !== \"\"\n//     ) {\n//       this.setState({\n//         dataSource: [...dataSource, newData],\n//         key: key + 1\n//       });\n//     }\n//   };\n//   handleResize = index => (e, { size }) => {\n//     this.setState(({ columns }) => {\n//       const nextColumns = [...columns];\n//       nextColumns[index] = {\n//         ...nextColumns[index],\n//         width: size.width\n//       };\n//       return { columns: nextColumns };\n//     });\n//   };\n//   // componentDidMount() {}\n//   render() {\n//     const columns = this.state.columns.map((col, index) => {\n//       if (!col.editable) {\n//         return col;\n//       }\n//       return {\n//         ...col,\n//         onHeaderCell: column => ({\n//           width: column.width,\n//           onResize: this.handleResize(index)\n//         }),\n//         onCell: record => ({\n//           record,\n//           inputType: col.dataIndex === \"age\" ? \"number\" : \"text\",\n//           dataIndex: col.dataIndex,\n//           title: col.title,\n//           editing: this.isEditing(record)\n//         })\n//       };\n//     });\n//     const {\n//       dataSource,\n//       visible,\n//       name,\n//       salary,\n//       age,\n//       address,\n//       phone,\n//       title\n//     } = this.state;\n//     console.log(this.props.location);\n//     return (\n//       <Fragment>\n//         <Content style={{ margin: \"2em 16px\" }}>\n//           <div style={{ background: \"#fff\", padding: 24, minHeight: 280 }}>\n//             <Title title={title} />\n//             <div style={{ textAlign: \"right\" }}>\n//               <Button\n//                 type=\"primary\"\n//                 onClick={this.showDrawer}\n//                 style={{ margin: \"2em\" }}\n//               >\n//                 Add\n//               </Button>\n//             </div>\n//             <PersonalDrawer\n//               onClose={this.onClose}\n//               visible={visible}\n//               name={name}\n//               salary={salary}\n//               age={age}\n//               address={address}\n//               phone={phone}\n//               namehandleChange={this.namehandleChange}\n//               priceHandleChange={this.priceHandleChange}\n//               typehandleChange={this.typehandleChange}\n//               agehandleChange={this.agehandleChange}\n//               addresshandleChange={this.addresshandleChange}\n//               phoneHandleChange={this.phoneHandleChange}\n//               handleAdd={this.handleAdd}\n//             />\n//             <EditableContext.Provider value={this.props.form}>\n//               <Table\n//                 components={this.components}\n//                 columns={columns}\n//                 dataSource={dataSource}\n//                 bordered\n//                 rowClassName=\"editable-row\"\n//                 title={() => \"Personal Information\"}\n//                 footer={() => \"Footer\"}\n//                 pagination={false}\n//                 scroll={{ y: 500 }}\n//               />\n//             </EditableContext.Provider>\n//           </div>\n//         </Content>\n//       </Fragment>\n//     );\n//   }\n// }\n// const WrappedHorizontalLoginForm = Form.create()(Personal);\n// export default WrappedHorizontalLoginForm;\nimport React from \"react\";\nimport { Content } from \"../../common/\";\n\nconst Personal = () => {\n  return React.createElement(Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 424\n    },\n    __self: this\n  });\n};\n\nexport default Personal;","map":{"version":3,"sources":["/Users/abdurauf/Desktop/毕业设计/orginal/restaurant-management-system/plov/src/components/Admin/components/personal.js"],"names":["React","Content","Personal"],"mappingskB,OAAlB;AACA,SAASC,OAAT,QAAwB,eAAxB;;AACA,MAAMC,QAAQ,GAAG,MAAM;AACrB,SAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAFD;;AAIA,eAAeA,QAAf","sourcesContent":["// import React, { Component, Fragment } from \"react\";\n// import {\n//   Layout,\n//   Table,\n//   Button,\n//   InputNumber,\n//   Input,\n//   Form,\n//   Row,\n//   Col\n// } from \"antd\";\n// import { Resizable } from \"react-resizable\";\n// import PersonalDrawer from \"../../common/personalDrawer\";\n// import Title from \"../../common/title\";\n\n// import \"../../../assets/css/AdminForm.css\";\n\n// // for resizing\n\n// const ResizeableTitle = props => {\n//   const { onResize, width, ...restProps } = props;\n\n//   if (!width) {\n//     return <th {...restProps} />;\n//   }\n\n//   return (\n//     <Resizable\n//       width={width}\n//       height={0}\n//       onResize={onResize}\n//       draggableOpts={{ enableUserSelectHack: false }}\n//     >\n//       <th {...restProps} />\n//     </Resizable>\n//   );\n// };\n\n// // for editable\n// const EditableContext = React.createContext();\n\n// class EditableCell extends React.Component {\n//   getInput = () => {\n//     if (this.props.inputType === \"number\") {\n//       return <InputNumber />;\n//     }\n//     return <Input />;\n//   };\n\n//   renderCell = ({ getFieldDecorator }) => {\n//     const {\n//       editing,\n//       dataIndex,\n//       title,\n//       inputType,\n//       record,\n//       index,\n//       children,\n//       ...restProps\n//     } = this.props;\n//     return (\n//       <td {...restProps}>\n//         {editing ? (\n//           <Form.Item style={{ margin: 0 }}>\n//             {getFieldDecorator(dataIndex, {\n//               rules: [\n//                 {\n//                   required: true,\n//                   message: `Please Input ${title}!`\n//                 }\n//               ],\n//               initialValue: record[dataIndex]\n//             })(this.getInput())}\n//           </Form.Item>\n//         ) : (\n//           children\n//         )}\n//       </td>\n//     );\n//   };\n\n//   render() {\n//     return (\n//       <EditableContext.Consumer>{this.renderCell}</EditableContext.Consumer>\n//     );\n//   }\n// }\n\n// const { Content } = Layout;\n// class Personal extends Component {\n//   constructor(props) {\n//     super(props);\n\n//     this.state = {\n//       columns: [\n//         {\n//           title: \"Name\",\n//           dataIndex: \"name\",\n//           editable: true\n//         },\n//         {\n//           title: \"Salary\",\n//           dataIndex: \"salary\",\n//           editable: true\n//         },\n//         {\n//           title: \"Type\",\n//           dataIndex: \"type\",\n//           editable: true\n//         },\n//         {\n//           title: \"Age\",\n//           dataIndex: \"age\",\n//           editable: true\n//         },\n//         {\n//           title: \"Address\",\n//           dataIndex: \"address\",\n//           editable: true\n//         },\n//         {\n//           title: \"Phone\",\n//           dataIndex: \"phone\",\n//           editable: true\n//         },\n//         {\n//           title: \"Action\",\n//           dataIndex: \"operation\",\n//           render: (text, record) => {\n//             const { editingKey } = this.state;\n//             const editable = this.isEditing(record);\n//             return editable ? (\n//               <span>\n//                 <EditableContext.Consumer>\n//                   {form => (\n//                     <Row gutter={20}>\n//                       <Col span={9}>\n//                         <Button\n//                           size=\"small\"\n//                           onClick={() => this.save(form, record.key)}\n//                           style={{ width: \"60px\" }}\n//                         >\n//                           Save\n//                         </Button>\n//                       </Col>\n//                       <Col span={9}>\n//                         <Button\n//                           size=\"small\"\n//                           style={{ width: \"70px\" }}\n//                           onClick={() => this.cancel(record.key)}\n//                         >\n//                           Cancel\n//                         </Button>\n//                       </Col>\n//                     </Row>\n//                   )}\n//                 </EditableContext.Consumer>\n//               </span>\n//             ) : (\n//               <Fragment>\n//                 <Row>\n//                   <Col span={10}>\n//                     <Button\n//                       type=\"danger\"\n//                       size=\"small\"\n//                       style={{ width: \"60px\" }}\n//                       onClick={() => this.handleDelete(record.key)}\n//                     >\n//                       Delete\n//                     </Button>\n//                   </Col>\n//                   <Col span={8}>\n//                     <Button\n//                       type=\"primary\"\n//                       size=\"small\"\n//                       style={{ width: \"60px\" }}\n//                       disabled={editingKey !== \"\"}\n//                       onClick={() => this.edit(record.key)}\n//                     >\n//                       Edit\n//                     </Button>\n//                   </Col>\n//                 </Row>\n//               </Fragment>\n//             );\n//           }\n//         }\n//       ],\n\n//       visible: false,\n//       dataSource: [],\n//       key: 0,\n//       editingKey: \"\",\n//       id: \"\",\n//       name: \"\",\n//       salary: \"\",\n//       type: \"\",\n//       age: \"\",\n//       address: \"\",\n//       phone: \"\",\n//       title: \"Personal Menu\"\n//     };\n//   }\n\n//   namehandleChange = event => {\n//     this.setState({\n//       name: event.target.value\n//     });\n//   };\n//   priceHandleChange = price => {\n//     this.setState({\n//       salary: price\n//     });\n//   };\n\n//   typehandleChange = type => {\n//     this.setState({\n//       type: type\n//     });\n//   };\n//   agehandleChange = age => {\n//     this.setState({\n//       age: age\n//     });\n//   };\n//   addresshandleChange = event => {\n//     this.setState({\n//       address: event.target.value\n//     });\n//   };\n\n//   phoneHandleChange = phone => {\n//     this.setState({\n//       phone: phone\n//     });\n//   };\n\n//   isEditing = record => record.key === this.state.editingKey;\n\n//   cancel = () => {\n//     this.setState({ editingKey: \"\" });\n//   };\n//   edit(key) {\n//     this.setState({ editingKey: key });\n//   }\n\n//   handleDelete = key => {\n//     const dataSource = [...this.state.dataSource];\n//     this.setState({ dataSource: dataSource.filter(item => item.key !== key) });\n//   };\n//   showDrawer = () => {\n//     this.setState({\n//       visible: true\n//     });\n//   };\n//   onClose = () => {\n//     this.setState({\n//       visible: false\n//     });\n//   };\n\n//   save(form, key) {\n//     form.validateFields((error, row) => {\n//       if (error) {\n//         return;\n//       }\n//       const newData = [...this.state.dataSource];\n//       const index = newData.findIndex(item => key === item.key);\n//       if (index > -1) {\n//         const item = newData[index];\n//         newData.splice(index, 1, {\n//           ...item,\n//           ...row\n//         });\n//         this.setState({ dataSource: newData, editingKey: \"\" });\n//       } else {\n//         newData.push(row);\n//         this.setState({ dataSource: newData, editingKey: \"\" });\n//       }\n//     });\n//   }\n//   components = {\n//     header: {\n//       cell: ResizeableTitle\n//     },\n//     body: {\n//       cell: EditableCell\n//     }\n//   };\n//   handleAdd = () => {\n//     const {\n//       key,\n//       dataSource,\n//       name,\n//       salary,\n//       type,\n//       age,\n//       address,\n//       phone\n//     } = this.state;\n\n//     const newData = {\n//       key: key,\n//       name: name,\n//       salary: salary + \"$\",\n//       type: type,\n//       age: age,\n//       address: address,\n//       phone: phone\n//     };\n//     if (\n//       name !== \"\" &&\n//       salary !== null &&\n//       type !== \"\" &&\n//       age !== null &&\n//       address !== \"\"\n//     ) {\n//       this.setState({\n//         dataSource: [...dataSource, newData],\n//         key: key + 1\n//       });\n//     }\n//   };\n\n//   handleResize = index => (e, { size }) => {\n//     this.setState(({ columns }) => {\n//       const nextColumns = [...columns];\n//       nextColumns[index] = {\n//         ...nextColumns[index],\n//         width: size.width\n//       };\n//       return { columns: nextColumns };\n//     });\n//   };\n//   // componentDidMount() {}\n\n//   render() {\n//     const columns = this.state.columns.map((col, index) => {\n//       if (!col.editable) {\n//         return col;\n//       }\n//       return {\n//         ...col,\n//         onHeaderCell: column => ({\n//           width: column.width,\n//           onResize: this.handleResize(index)\n//         }),\n//         onCell: record => ({\n//           record,\n//           inputType: col.dataIndex === \"age\" ? \"number\" : \"text\",\n//           dataIndex: col.dataIndex,\n//           title: col.title,\n//           editing: this.isEditing(record)\n//         })\n//       };\n//     });\n//     const {\n//       dataSource,\n//       visible,\n//       name,\n//       salary,\n//       age,\n//       address,\n//       phone,\n//       title\n//     } = this.state;\n//     console.log(this.props.location);\n//     return (\n//       <Fragment>\n//         <Content style={{ margin: \"2em 16px\" }}>\n//           <div style={{ background: \"#fff\", padding: 24, minHeight: 280 }}>\n//             <Title title={title} />\n//             <div style={{ textAlign: \"right\" }}>\n//               <Button\n//                 type=\"primary\"\n//                 onClick={this.showDrawer}\n//                 style={{ margin: \"2em\" }}\n//               >\n//                 Add\n//               </Button>\n//             </div>\n//             <PersonalDrawer\n//               onClose={this.onClose}\n//               visible={visible}\n//               name={name}\n//               salary={salary}\n//               age={age}\n//               address={address}\n//               phone={phone}\n//               namehandleChange={this.namehandleChange}\n//               priceHandleChange={this.priceHandleChange}\n//               typehandleChange={this.typehandleChange}\n//               agehandleChange={this.agehandleChange}\n//               addresshandleChange={this.addresshandleChange}\n//               phoneHandleChange={this.phoneHandleChange}\n//               handleAdd={this.handleAdd}\n//             />\n//             <EditableContext.Provider value={this.props.form}>\n//               <Table\n//                 components={this.components}\n//                 columns={columns}\n//                 dataSource={dataSource}\n//                 bordered\n//                 rowClassName=\"editable-row\"\n//                 title={() => \"Personal Information\"}\n//                 footer={() => \"Footer\"}\n//                 pagination={false}\n//                 scroll={{ y: 500 }}\n//               />\n//             </EditableContext.Provider>\n//           </div>\n//         </Content>\n//       </Fragment>\n//     );\n//   }\n// }\n\n// const WrappedHorizontalLoginForm = Form.create()(Personal);\n// export default WrappedHorizontalLoginForm;\n\nimport React from \"react\";\nimport { Content } from \"../../common/\";\nconst Personal = () => {\n  return <Content />;\n};\n\nexport default Personal;\n"]},"metadata":{},"sourceType":"module"}