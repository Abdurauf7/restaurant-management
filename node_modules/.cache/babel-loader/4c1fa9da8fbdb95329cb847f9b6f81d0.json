{"ast":null,"code":"import _defaults from \"lodash/defaults\";\nimport _assign from \"lodash/assign\";\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nvar fontDictionary = {\n  \"American Typewriter\": 2.09,\n  Baskerville: 2.51,\n  Georgia: 2.27,\n  \"Hoefler Text\": 2.39,\n  Palatino: 2.26,\n  \"Times New Roman\": 2.48,\n  Arial: 2.26,\n  \"Gill Sans\": 2.47,\n  \"Gill Sans 300\": 2.58,\n  \"Helvetica Neue\": 2.24,\n  \"Lucida Grande\": 2.05,\n  Tahoma: 2.25,\n  \"Trebuchet MS\": 2.2,\n  Verdana: 1.96,\n  \"Courier New\": 1.67,\n  cursive: 1.84,\n  fantasy: 2.09,\n  monospace: 1.81,\n  serif: 2.04,\n  \"sans-serif\": 1.89\n}; //https://developer.mozilla.org/en/docs/Web/CSS/length\n// Absolute sizes in pixels for obsolete measurement units.\n\nvar absoluteMeasurementUnitsToPixels = {\n  mm: 3.8,\n  sm: 38,\n  pt: 1.33,\n  pc: 16,\n  in: 96,\n  px: 1\n};\nvar relativeMeasurementUnitsCoef = {\n  em: 1,\n  ex: 0.5\n};\nvar coefficients = {\n  averageFontConstant: 2.1675,\n  // Average pixels per glyph in existing font.\n  widthOverlapCoef: 1.25,\n  // Coefficient for width value to prevent overlap.\n  heightOverlapCoef: 1.05,\n  // Coefficient for height value to prevent overlap.\n  lineCapitalCoef: 1.15,\n  // Coefficient for height value. Reserve space for capital chars.\n  lineSpaceHeightCoef: 0.2 // Coefficient for height value. Reserve space between lines.\n\n};\nvar defaultStyle = {\n  lineHeight: 1,\n  letterSpacing: \"0px\",\n  fontSize: 0,\n  angle: 0,\n  fontFamily: \"\"\n};\n\nvar _degreeToRadian = function (angle) {\n  return angle * Math.PI / 180;\n};\n\nvar _getFontCharacterConstant = function (fontFamily) {\n  var firstFont = fontFamily.split(\",\")[0].replace(/'|\"/g, \"\");\n  return fontDictionary[firstFont] || coefficients.averageFontConstant;\n};\n\nvar _splitToLines = function (text) {\n  return Array.isArray(text) ? text : text.toString().split(/\\r\\n|\\r|\\n/g);\n};\n\nvar _getSizeWithRotate = function (axisSize, dependentSize, angle) {\n  var angleInRadian = _degreeToRadian(angle);\n\n  return Math.abs(Math.cos(angleInRadian) * axisSize) + Math.abs(Math.sin(angleInRadian) * dependentSize);\n};\n/**\n * Convert length-type parameters from specific measurement units to pixels\n * @param  {string} length Css length string value.\n * @param  {number} fontSize Current text font-size.\n * @returns {number} Approximate Css length in pixels.\n */\n\n\nvar convertLengthToPixels = function (length, fontSize) {\n  var attribute = length.match(/[a-zA-Z%]+/)[0];\n  var value = length.match(/[0-9.,]+/);\n  var result;\n\n  if (absoluteMeasurementUnitsToPixels.hasOwnProperty(attribute)) {\n    result = value * absoluteMeasurementUnitsToPixels[attribute];\n  } else if (relativeMeasurementUnitsCoef.hasOwnProperty(attribute)) {\n    result = (fontSize ? value * fontSize : value * defaultStyle.fontSize) * relativeMeasurementUnitsCoef[attribute];\n  } else {\n    result = value;\n  }\n\n  return result;\n};\n\nvar _prepareParams = function (inputStyle, index) {\n  var lineStyle = Array.isArray(inputStyle) ? inputStyle[index] : inputStyle;\n\n  var style = _defaults({}, lineStyle, defaultStyle);\n\n  return _assign({}, style, {\n    characterConstant: style.characterConstant || _getFontCharacterConstant(style.fontFamily),\n    letterSpacing: convertLengthToPixels(style.letterSpacing, style.fontSize),\n    fontSize: typeof style.fontSize === \"number\" ? style.fontSize : convertLengthToPixels(String(style.fontSize))\n  });\n};\n\nvar _approximateTextWidthInternal = function (text, style) {\n  if (text === undefined || text === \"\" || text === null) {\n    return 0;\n  }\n\n  var widths = _splitToLines(text).map(function (line, index) {\n    var len = line.toString().length;\n\n    var _prepareParams2 = _prepareParams(style, index),\n        fontSize = _prepareParams2.fontSize,\n        characterConstant = _prepareParams2.characterConstant,\n        letterSpacing = _prepareParams2.letterSpacing;\n\n    return len * fontSize / characterConstant + letterSpacing * Math.max(len - 1, 0);\n  });\n\n  return Math.max.apply(Math, _toConsumableArray(widths));\n};\n\nvar _approximateTextHeightInternal = function (text, style) {\n  if (text === undefined || text === \"\" || text === null) {\n    return 0;\n  }\n\n  return _splitToLines(text).reduce(function (total, line, index) {\n    var lineStyle = _prepareParams(style, index);\n\n    var containsCaps = line.toString().match(/[(A-Z)(0-9)]/);\n    var height = containsCaps ? lineStyle.fontSize * coefficients.lineCapitalCoef : lineStyle.fontSize;\n    var emptySpace = index === 0 ? 0 : lineStyle.fontSize * coefficients.lineSpaceHeightCoef;\n    return total + lineStyle.lineHeight * (height + emptySpace);\n  }, 0);\n};\n/**\n * Predict text size by font params.\n * @param {string} text Content for width calculation.\n * @param {Object} style Text styles, ,fontFamily, fontSize, etc.\n * @param {string} style.fontFamily Text fontFamily.\n * @param {(number|string)} style.fontSize Text fontSize.\n * @param {number} style.angle Text rotate angle.\n * @param {string} style.letterSpacing Text letterSpacing(space between letters).\n * @param {number} style.characterConstant Average pixels per glyph.\n * @param {number} style.lineHeight Line height coefficient.\n * @returns {number} Approximate text label height.\n */\n\n\nvar approximateTextSize = function (text, style) {\n  var angle = Array.isArray(style) ? style[0] && style[0].angle : style && style.angle;\n\n  var height = _approximateTextHeightInternal(text, style);\n\n  var width = _approximateTextWidthInternal(text, style);\n\n  var widthWithRotate = angle ? _getSizeWithRotate(width, height, angle) : width;\n  var heightWithRotate = angle ? _getSizeWithRotate(height, width, angle) : height;\n  return {\n    width: widthWithRotate * coefficients.widthOverlapCoef,\n    height: heightWithRotate * coefficients.heightOverlapCoef\n  };\n};\n\nexport default {\n  approximateTextSize: approximateTextSize,\n  convertLengthToPixels: convertLengthToPixels\n};","map":{"version":3,"sources":["/Users/abdurauf/Desktop/diploma/restaurant-management-system/plov/node_modules/victory-core/es/victory-util/textsize.js"],"names":["_defaults","_assign","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","TypeError","iter","Symbol","iterator","Object","prototype","toString","call","Array","from","isArray","i","arr2","length","fontDictionary","Baskerville","Georgia","Palatino","Arial","Tahoma","Verdana","cursive","fantasy","monospace","serif","absoluteMeasurementUnitsToPixels","mm","sm","pt","pc","in","px","relativeMeasurementUnitsCoef","em","ex","coefficients","averageFontConstant","widthOverlapCoef","heightOverlapCoef","lineCapitalCoef","lineSpaceHeightCoef","defaultStyle","lineHeight","letterSpacing","fontSize","angle","fontFamily","_degreeToRadian","Math","PI","_getFontCharacterConstant","firstFont","split","replace","_splitToLines","text","_getSizeWithRotate","axisSize","dependentSize","angleInRadian","abs","cos","sin","convertLengthToPixels","attribute","match","value","result","hasOwnProperty","_prepareParams","inputStyle","index","lineStyle","style","characterConstant","String","_approximateTextWidthInternal","undefined","widths","map","line","len","_prepareParams2","max","apply","_approximateTextHeightInternal","reduce","total","containsCaps","height","emptySpace","approximateTextSize","width","widthWithRotate","heightWithRotate"],"mappings":"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","sourcesContent":["import _defaults from \"lodash/defaults\";\nimport _assign from \"lodash/assign\";\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nvar fontDictionary = {\n  \"American Typewriter\": 2.09,\n  Baskerville: 2.51,\n  Georgia: 2.27,\n  \"Hoefler Text\": 2.39,\n  Palatino: 2.26,\n  \"Times New Roman\": 2.48,\n  Arial: 2.26,\n  \"Gill Sans\": 2.47,\n  \"Gill Sans 300\": 2.58,\n  \"Helvetica Neue\": 2.24,\n  \"Lucida Grande\": 2.05,\n  Tahoma: 2.25,\n  \"Trebuchet MS\": 2.2,\n  Verdana: 1.96,\n  \"Courier New\": 1.67,\n  cursive: 1.84,\n  fantasy: 2.09,\n  monospace: 1.81,\n  serif: 2.04,\n  \"sans-serif\": 1.89\n}; //https://developer.mozilla.org/en/docs/Web/CSS/length\n// Absolute sizes in pixels for obsolete measurement units.\n\nvar absoluteMeasurementUnitsToPixels = {\n  mm: 3.8,\n  sm: 38,\n  pt: 1.33,\n  pc: 16,\n  in: 96,\n  px: 1\n};\nvar relativeMeasurementUnitsCoef = {\n  em: 1,\n  ex: 0.5\n};\nvar coefficients = {\n  averageFontConstant: 2.1675,\n  // Average pixels per glyph in existing font.\n  widthOverlapCoef: 1.25,\n  // Coefficient for width value to prevent overlap.\n  heightOverlapCoef: 1.05,\n  // Coefficient for height value to prevent overlap.\n  lineCapitalCoef: 1.15,\n  // Coefficient for height value. Reserve space for capital chars.\n  lineSpaceHeightCoef: 0.2 // Coefficient for height value. Reserve space between lines.\n\n};\nvar defaultStyle = {\n  lineHeight: 1,\n  letterSpacing: \"0px\",\n  fontSize: 0,\n  angle: 0,\n  fontFamily: \"\"\n};\n\nvar _degreeToRadian = function (angle) {\n  return angle * Math.PI / 180;\n};\n\nvar _getFontCharacterConstant = function (fontFamily) {\n  var firstFont = fontFamily.split(\",\")[0].replace(/'|\"/g, \"\");\n  return fontDictionary[firstFont] || coefficients.averageFontConstant;\n};\n\nvar _splitToLines = function (text) {\n  return Array.isArray(text) ? text : text.toString().split(/\\r\\n|\\r|\\n/g);\n};\n\nvar _getSizeWithRotate = function (axisSize, dependentSize, angle) {\n  var angleInRadian = _degreeToRadian(angle);\n\n  return Math.abs(Math.cos(angleInRadian) * axisSize) + Math.abs(Math.sin(angleInRadian) * dependentSize);\n};\n/**\n * Convert length-type parameters from specific measurement units to pixels\n * @param  {string} length Css length string value.\n * @param  {number} fontSize Current text font-size.\n * @returns {number} Approximate Css length in pixels.\n */\n\n\nvar convertLengthToPixels = function (length, fontSize) {\n  var attribute = length.match(/[a-zA-Z%]+/)[0];\n  var value = length.match(/[0-9.,]+/);\n  var result;\n\n  if (absoluteMeasurementUnitsToPixels.hasOwnProperty(attribute)) {\n    result = value * absoluteMeasurementUnitsToPixels[attribute];\n  } else if (relativeMeasurementUnitsCoef.hasOwnProperty(attribute)) {\n    result = (fontSize ? value * fontSize : value * defaultStyle.fontSize) * relativeMeasurementUnitsCoef[attribute];\n  } else {\n    result = value;\n  }\n\n  return result;\n};\n\nvar _prepareParams = function (inputStyle, index) {\n  var lineStyle = Array.isArray(inputStyle) ? inputStyle[index] : inputStyle;\n\n  var style = _defaults({}, lineStyle, defaultStyle);\n\n  return _assign({}, style, {\n    characterConstant: style.characterConstant || _getFontCharacterConstant(style.fontFamily),\n    letterSpacing: convertLengthToPixels(style.letterSpacing, style.fontSize),\n    fontSize: typeof style.fontSize === \"number\" ? style.fontSize : convertLengthToPixels(String(style.fontSize))\n  });\n};\n\nvar _approximateTextWidthInternal = function (text, style) {\n  if (text === undefined || text === \"\" || text === null) {\n    return 0;\n  }\n\n  var widths = _splitToLines(text).map(function (line, index) {\n    var len = line.toString().length;\n\n    var _prepareParams2 = _prepareParams(style, index),\n        fontSize = _prepareParams2.fontSize,\n        characterConstant = _prepareParams2.characterConstant,\n        letterSpacing = _prepareParams2.letterSpacing;\n\n    return len * fontSize / characterConstant + letterSpacing * Math.max(len - 1, 0);\n  });\n\n  return Math.max.apply(Math, _toConsumableArray(widths));\n};\n\nvar _approximateTextHeightInternal = function (text, style) {\n  if (text === undefined || text === \"\" || text === null) {\n    return 0;\n  }\n\n  return _splitToLines(text).reduce(function (total, line, index) {\n    var lineStyle = _prepareParams(style, index);\n\n    var containsCaps = line.toString().match(/[(A-Z)(0-9)]/);\n    var height = containsCaps ? lineStyle.fontSize * coefficients.lineCapitalCoef : lineStyle.fontSize;\n    var emptySpace = index === 0 ? 0 : lineStyle.fontSize * coefficients.lineSpaceHeightCoef;\n    return total + lineStyle.lineHeight * (height + emptySpace);\n  }, 0);\n};\n/**\n * Predict text size by font params.\n * @param {string} text Content for width calculation.\n * @param {Object} style Text styles, ,fontFamily, fontSize, etc.\n * @param {string} style.fontFamily Text fontFamily.\n * @param {(number|string)} style.fontSize Text fontSize.\n * @param {number} style.angle Text rotate angle.\n * @param {string} style.letterSpacing Text letterSpacing(space between letters).\n * @param {number} style.characterConstant Average pixels per glyph.\n * @param {number} style.lineHeight Line height coefficient.\n * @returns {number} Approximate text label height.\n */\n\n\nvar approximateTextSize = function (text, style) {\n  var angle = Array.isArray(style) ? style[0] && style[0].angle : style && style.angle;\n\n  var height = _approximateTextHeightInternal(text, style);\n\n  var width = _approximateTextWidthInternal(text, style);\n\n  var widthWithRotate = angle ? _getSizeWithRotate(width, height, angle) : width;\n  var heightWithRotate = angle ? _getSizeWithRotate(height, width, angle) : height;\n  return {\n    width: widthWithRotate * coefficients.widthOverlapCoef,\n    height: heightWithRotate * coefficients.heightOverlapCoef\n  };\n};\n\nexport default {\n  approximateTextSize: approximateTextSize,\n  convertLengthToPixels: convertLengthToPixels\n};"]},"metadata":{},"sourceType":"module"}